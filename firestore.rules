
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the 'employees' collection
    match /employees/{employeeId} {
      
      // Allow anyone to read an employee's profile. 
      // This is required for the public profile pages to function.
      allow read: if true;

      // Allow anyone to create a new employee document.
      // This is the critical rule that fixes the public enrollment failure.
      allow create: if true;

      // Allow authenticated users (admins) to update any field.
      // Also allow any user (even unauthenticated) to update ONLY specific
      // document URL fields, and only if those fields do not already exist.
      // This securely enables the "upload missing documents" feature for public users.
      allow update: if request.auth != null || (
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly([
            'updatedAt', // Allow this to be set
            'identityProofUrlFront', 'identityProofUrlBack', 
            'addressProofUrlFront', 'addressProofUrlBack',
            'signatureUrl', 'bankPassbookStatementUrl', 'policeClearanceCertificateUrl'
          ]) && (
            // For each key they are trying to write, check if it existed before.
            (!('identityProofUrlFront' in resource.data) || !request.resource.data.keys().hasAny(['identityProofUrlFront'])) &&
            (!('identityProofUrlBack' in resource.data) || !request.resource.data.keys().hasAny(['identityProofUrlBack'])) &&
            (!('addressProofUrlFront' in resource.data) || !request.resource.data.keys().hasAny(['addressProofUrlFront'])) &&
            (!('addressProofUrlBack' in resource.data) || !request.resource.data.keys().hasAny(['addressProofUrlBack'])) &&
            (!('signatureUrl' in resource.data) || !request.resource.data.keys().hasAny(['signatureUrl'])) &&
            (!('bankPassbookStatementUrl' in resource.data) || !request.resource.data.keys().hasAny(['bankPassbookStatementUrl'])) &&
            (!('policeClearanceCertificateUrl' in resource.data) || !request.resource.data.keys().hasAny(['policeClearanceCertificateUrl']))
          )
      );

      // Only allow authenticated users (admins) to delete employee records.
      allow delete: if request.auth != null;
    }

    // Rules for the 'clients' collection
    match /clients/{clientId} {

      // Allow anyone to read the list of clients. 
      // This is required for the client dropdown on the enrollment forms to work.
      allow read: if true;

      // Only allow authenticated users (admins) to add, update, or delete clients.
      allow create, update, delete: if request.auth != null;
    }
  }
}
