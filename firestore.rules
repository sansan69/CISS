rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the 'employees' collection
    match /employees/{employeeId} {
      
      // Helper functions for clarity and reuse
      function isOwner(request, doc) {
        return request.auth != null && request.auth.token.phone_number == '+91' + doc.data.phoneNumber;
      }
      function isAdmin(request) {
        return request.auth != null && request.auth.token.email != null;
      }
       function isNewUserVerified(request) {
        return request.auth != null && request.auth.token.phone_number == '+91' + request.resource.data.phoneNumber;
      }
      function hasRequiredCreateFields(docData) {
        return 'clientName' in docData && 'joiningDate' in docData && 'firstName' in docData && 'lastName' in docData && 'fatherName' in docData && 'motherName' in docData && 'dateOfBirth' in docData && 'gender' in docData && 'maritalStatus' in docData && 'district' in docData && 'identityProofType' in docData && 'identityProofNumber' in docData && 'fullAddress' in docData && 'emailAddress' in docData && 'phoneNumber' in docData;
      }

      // READ: Admins can list all. Owners can get their own doc.
      allow get: if isOwner(request, resource) || isAdmin(request);
      allow list: if isAdmin(request);

      // CREATE: Allow if the incoming document has all the required fields.
      // This allows the public enrollment form to submit.
      allow create: if hasRequiredCreateFields(request.resource.data);

      // UPDATE: Allow if the user is an admin OR if they are the owner and not changing their phone number.
      allow update: if isAdmin(request) || (isOwner(request, resource) && request.resource.data.phoneNumber == resource.data.phoneNumber);
      
      // DELETE: Only admins can delete.
      allow delete: if isAdmin(request);
    }

    // Rules for the 'clients' collection
    match /clients/{clientId} {
      // Allow anyone to read the list of clients for dropdowns.
      allow read: if true;

      // Only allow admins to write (create, update, delete).
      allow write: if request.auth != null && request.auth.token.email != null;
    }

    // Deny all other access to the database
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
